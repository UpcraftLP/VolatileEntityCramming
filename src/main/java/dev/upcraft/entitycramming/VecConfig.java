package dev.upcraft.entitycramming;

import io.github.fablabsmc.fablabs.api.fiber.v1.annotation.Setting;
import me.shedaniel.fiber2cloth.api.ClothSetting;
import net.minecraft.util.Identifier;
import net.minecraft.util.StringIdentifiable;
import net.minecraft.world.explosion.Explosion;

import java.util.function.Supplier;

public class VecConfig {

    @Setting(comment = "[EXPERIMENTAL]\nIf enabled, will generate an explosion every time an entity takes damage of type cramming, even if it was not actually caused by the vanilla mechanic")
    public boolean explodeOnAllCrammingDamage = false;

    @ClothSetting.RequiresRestart
    @Setting(comment = "if greater than 1, will change the default value of the maxEntityCramming game rule to the specified value")
    public int defaultMaxEntityCramming = 12;

    @ClothSetting.EnumHandler(ClothSetting.EnumHandler.EnumDisplayOption.DROPDOWN)
    @Setting(comment = "Specify the type of block destruction for explosions caused by this mod\nPossible values are: \"NONE\", \"BREAK\", \"DESTROY\"")
    public BlockDestruction blockBreaking = BlockDestruction.NONE;

    @Setting(comment = "The strength of explosions generated by this mod\nValues less than 0.0001 will be treated as 0.0001")
    public float explosionPower = 2.0F;

    @ClothSetting.CollapsibleObject
    @ClothSetting.RegistryInput("sound_event")
    @Setting(comment = "The sound(s) to play when an explosion was caused by this mod\nLeave empty to disable\nNote: If more than one sound is specified, a random one will be picked every time")
    public Identifier[] explosionSounds = new Identifier[]{new Identifier("entity.generic.extinguish_fire")};

    /**
     * Basically a copy of {@linkplain net.minecraft.world.explosion.Explosion.DestructionType} <br/>
     * This class exists to keep readable names for the values when de/serializing
     */
    public enum BlockDestruction implements StringIdentifiable {
        NONE("none", () -> Explosion.DestructionType.NONE),
        BREAK("break", () -> Explosion.DestructionType.BREAK),
        DESTROY("destroy", () -> Explosion.DestructionType.DESTROY);

        private final String name;
        private final Supplier<Explosion.DestructionType> typeSupplier;

        BlockDestruction(String name, Supplier<Explosion.DestructionType> typeSupplier) {
            this.name = name;
            this.typeSupplier = typeSupplier;
        }

        public Explosion.DestructionType toDestructionType() {
            return this.typeSupplier.get();
        }

        @Override
        public String asString() {
            return name;
        }

        @Override
        public String toString() {
            return asString();
        }
    }
}
